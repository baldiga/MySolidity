pragma solidity ^0.4.0;

interface Regulator{
    function loan() returns (bool);
    function checkValue(uint amount) returns (bool);
}

contract Bank is Regulator{
    uint private value;
    address private owner;
    
    modifier ownerFunc {
        require (owner == msg.sender); _;
    }
    
    function Bank(uint amount){
        value = amount;
        owner = msg.sender;
    }
    function deposit (uint amount) ownerFunc{
        value += amount;
    }
    function withdraw(uint amount) ownerFunc{
        if(checkValue(amount))
            value -= amount;
    }
    function balance() returns(uint){
        return value;
    }
    
    function loan() returns (bool) {return value > 0;}
    function checkValue(uint amount) returns (bool){
        return value >= amount;
    }
}

contract Movie is Bank(11){
    string name;
    uint age;
    
    
    function setName(string _newName) {
        name = _newName;
    }
    function getName()constant returns(string){
        return name;
    }
    function setAge(uint newAge){
        age = newAge;
    }
    function getAge() constant returns(uint){
        return age;
    }
}

contract testThrows{
    function testAssert(){
        assert(2==1);
    }
    function testRevert(){
        revert();
    }
    function testRequire(){
        require (2 == 1);
    }
    function testThrow(){
        throw;
    }
}
