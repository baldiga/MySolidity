pragma solidity ^0.4.15;

contract myDataTypes{
    
    bool myBool = false;
    
    int8 myInt = -128;
    uint8 myuint = 255;
    
    string myString;
    uint8[] myStringArr;
    
    bytes1 myBytes1;
    bytes32 myBytes31;
    
    enum Action {ADD, REMOVE, UPDATE} 
    Action myAction = Action.ADD;
    
    address myAddress;
    function testAddress() public{
        myAddress = msg.sender;
        myAddress.balance;
        myAddress.transfer(5);
    }
    
    uint[] myUintArr = [1,2,3];
    uint[10] my2UintArr;
    function myUintArrFunc() public{
        myUintArr.push(1);
        myUintArr.length;
        myUintArr[0];
    }
    
    struct Account{
        uint balance;
        uint dailyLimit;
    }
    Account myAccount;
    function accountFunc() public{
        myAccount.balance = 100;
    }
    mapping (address => Account) _accounts;
    function ()public payable{
        _accounts[msg.sender].balance += msg.value;
    }
    function getBalance() public returns(uint){
        return _accounts[msg.sender].balance;
    }
}