pragma solidity ^0.4.15;

library StringsLib {
        
    function concat (string _base, string _value) internal returns(string){
        bytes memory _baseBytes = bytes (_base);
        bytes memory _valueBytes = bytes(_value);
        
        string memory _tmpValue = new string(_valueBytes.length + _baseBytes.length);
        bytes memory _newValue = bytes(_tmpValue);
        
        uint i;
        uint j;
        
        for (i=0; i< _baseBytes.length; i++){
            _newValue[j] = _baseBytes[i];
            j++;
        }
        for (i=0; i< _valueBytes.length; i++){
            _newValue[j] = _valueBytes[i];
            j++;
        }
        return string(_newValue);
        
        
    }
function stringPos(string _base, string _value) internal returns (int){
            bytes memory _baseBytes = bytes (_base);
            bytes memory _valueBytes = bytes(_value);
            
            assert (_valueBytes.length == 1);
            
            for (uint i=0; i<_baseBytes.length; i++){
                if (_baseBytes[i] == _valueBytes[0])
                        return int(i);
            }
            return -1;
        }
}
contract testStrings{
    using StringsLib for string;
    
    function testConcat (string _base) returns (string){
        return _base.concat("_suffix");
    }
    function testStringPos (string _base) returns (int){
       return _base.stringPos ("x");
    }
}